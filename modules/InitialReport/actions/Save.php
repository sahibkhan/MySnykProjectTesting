<?php
/*+***********************************************************************************
 * The contents of this file are subject to the vtiger CRM Public License Version 1.0
 * ("License"); You may not use this file except in compliance with the License
 * The Original Code is:  vtiger CRM Open Source
 * The Initial Developer of the Original Code is vtiger.
 * Portions created by vtiger are Copyright (C) vtiger.
 * All Rights Reserved.
 *************************************************************************************/
//ini_set('display_errors','on'); version_compare(PHP_VERSION, '5.5.0') <= 0 ? error_reporting(E_WARNING & ~E_NOTICE & ~E_DEPRECATED) : error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT);   // DEBUGGING

class InitialReport_Save_Action extends Vtiger_Save_Action {

	public function requiresPermission(\Vtiger_Request $request) {
		$permissions = parent::requiresPermission($request);
		$moduleParameter = $request->get('source_module');
		if (!$moduleParameter) {
			$moduleParameter = 'module';
		}else{
			$moduleParameter = 'source_module';
		}
		$record = $request->get('record');
		$recordId = $request->get('id');
		if (!$record) {
			$recordParameter = '';
		}else{
			$recordParameter = 'record';
		}
		$actionName = ($record || $recordId) ? 'EditView' : 'CreateView';
        $permissions[] = array('module_parameter' => $moduleParameter, 'action' => 'DetailView', 'record_parameter' => $recordParameter);
		$permissions[] = array('module_parameter' => $moduleParameter, 'action' => $actionName, 'record_parameter' => $recordParameter);
		return $permissions;
	}
	
	public function checkPermission(Vtiger_Request $request) {
		$moduleName = $request->getModule();
		$record = $request->get('record');

		$nonEntityModules = array('Users', 'Events', 'Calendar', 'Portal', 'Reports', 'Rss', 'EmailTemplates');
		if ($record && !in_array($moduleName, $nonEntityModules)) {
			$recordEntityName = getSalesEntityType($record);
			if ($recordEntityName !== $moduleName) {
				throw new AppException(vtranslate('LBL_PERMISSION_DENIED'));
			}
		}
		return parent::checkPermission($request);
	}
	
	public function validateRequest(Vtiger_Request $request) {
		return $request->validateWriteAccess();
	}

	public function process(Vtiger_Request $request) {
		try {
			
			$db = PearDatabase::getInstance();
			//global $adb;
			//$adb->setDebug(true);

			if($request->get('cf_4145')){
			$qhse = implode(' |##| ', $request->get('cf_4145'));
				$request->set('cf_4145', $qhse);
			}else{
				$request->set('cf_4145', '');	
			}

			if($request->get('direct_supervisor')){
				$request->set('cf_4147', $request->get('direct_supervisor'));
			}else{
				$request->set('cf_4147', '');
			}
			
			$recordModel = $this->saveRecord($request);
			
			$recordId = $recordModel->getId();
			$emailSend = array('No');
			if($recordId){
				$qry = $db->pquery('select emailSend from vtiger_initialreport where initialreportid = ?', array($recordId));		 
				if($db->num_rows($qry)  > 0){
					 $emailSend = $db->fetch_array($qry);
					 //$emailSend = $db->query_result($qry, 0, 'emailSend');
				 }	
			}
			
			if($request->get('cf_4149') == "on" && $emailSend[0] != "Yes")
			{
				$qhseMember = $request->get('cf_4145');
				$fleetMember = $request->get('cf_4147');
				
				if($qhseMember)
				{
					$email_qhse = array();
					if(strstr($qhseMember, ' |##| ') ){
						$qhseMember = explode(' |##| ', $qhseMember);
						foreach($qhseMember as $value)
						{
							$result = $db->pquery('SELECT email1 FROM vtiger_users WHERE id = ?', array($value));
							if($db->num_rows($result)) 
							{
								$email_qhse[] = $db->query_result($result, 0, 'email1');
							}
						}
					
					}else{
						$qhseMember	= $qhseMember;
						$result = $db->pquery('SELECT email1 FROM vtiger_users WHERE id = ?', array($qhseMember));
						if($db->num_rows($result)) 
						{
							$email_qhse[] = $db->query_result($result, 0, 'email1');
						}
					}					
				}
				
				$email_fleet = '';
				if($fleetMember)
				{
					$db = PearDatabase::getInstance();
					$result = $db->pquery('SELECT email1 FROM vtiger_users WHERE id = ?', array($fleetMember));
					if($db->num_rows($result)) 
					{
						$email_fleet = $db->query_result($result, 0, 'email1');
					}
				}
				
				
				global $site_URL;	
				$loadUrl = $recordModel->getDetailViewUrl();
				$fullURL = $site_URL."/".$loadUrl;
				
				$reference = "This is an autogenerated Email. Please do not reply to this email<br><br>";
				$title  = "First Generic Report Submitted";
				$reference .= "$title<br>";
				
				$reference .= "<br>\n\rPlease find more information about first generic report by visiting the <a href='".$fullURL."'><strong>link</strong></a><br><br>";
			
					
				$message = $reference;
				$message .= "<strong>--------------------------------------------------</strong><br><br>";  

				$subject = "First Generic Report Submitted";
				$from = "no-reply@globalink.net";

				require_once 'vtlib/Vtiger/Mailer.php';
				global $HELPDESK_SUPPORT_EMAIL_ID;
				$mailer = new Vtiger_Mailer();
				$mailer->IsHTML(true);
				$mailer->ConfigSenderInfo($from);
				$mailer->Subject =$subject;
				$mailer->Body = $message;

				$tos[] = $email_qhse;
				if(!empty($email_fleet)){
					$tos[] = $email_fleet;
				}
				//$to = 's.mehtab@globalinklogistics.com';
				//$mailer->AddAddress($to);	
				if(!empty($tos))
				{
					foreach($tos as $to){
						$mailer->AddAddress($to);
					}
				}
				
				//$mail->AddCC('person1@domain.com', 'Person One');
				//$mail->AddCC('person2@domain.com', 'Person Two');
				//if(!empty($branch_bfm_emails))
				//{
				//	foreach($branch_bfm_emails as $bfm_emails){
				//		$mailer->AddCC($bfm_emails);
				//	}
				//}

				//$mailer->AddCC($current_user->get('email1'));
				$mailer->AddBCC('erp.support@globalinklogistics.com');
				$status = $mailer->Send(true);

				//if($status){
					$db = PearDatabase::getInstance();
					$result = $db->pquery('update vtiger_initialreport set emailSend = "Yes" WHERE initialreportid = ?', array($recordId));
				//}				
			}
			
		

			if ($request->get('returntab_label')){
				$loadUrl = 'index.php?'.$request->getReturnURL();
			} else if($request->get('relationOperation')) {
				$parentModuleName = $request->get('sourceModule');
				$parentRecordId = $request->get('sourceRecord');
				$parentRecordModel = Vtiger_Record_Model::getInstanceById($parentRecordId, $parentModuleName);
				//TODO : Url should load the related list instead of detail view of record
				$loadUrl = $parentRecordModel->getDetailViewUrl();
			} else if ($request->get('returnToList')) {
				$loadUrl = $recordModel->getModule()->getListViewUrl();
			} else if ($request->get('returnmodule') && $request->get('returnview')) {
				$loadUrl = 'index.php?'.$request->getReturnURL();
			} else {
				$loadUrl = $recordModel->getDetailViewUrl();
			}
			//append App name to callback url
			//Special handling for vtiger7.
			$appName = $request->get('appName');
			if(strlen($appName) > 0){
				$loadUrl = $loadUrl.$appName;
			}
			header("Location: $loadUrl");
		} catch (DuplicateException $e) {
			$requestData = $request->getAll();
			$moduleName = $request->getModule();
			unset($requestData['action']);
			unset($requestData['__vtrftk']);

			if ($request->isAjax()) {
				$response = new Vtiger_Response();
				$response->setError($e->getMessage(), $e->getDuplicationMessage(), $e->getMessage());
				$response->emit();
			} else {
				$requestData['view'] = 'Edit';
				$requestData['duplicateRecords'] = $e->getDuplicateRecordIds();
				$moduleModel = Vtiger_Module_Model::getInstance($moduleName);

				global $vtiger_current_version;
				$viewer = new Vtiger_Viewer();

				$viewer->assign('REQUEST_DATA', $requestData);
				$viewer->assign('REQUEST_URL', $moduleModel->getCreateRecordUrl().'&record='.$request->get('record'));
				$viewer->view('RedirectToEditView.tpl', 'Vtiger');
			}
		} catch (Exception $e) {
			throw new Exception($e->getMessage());
		}
	}

	/**
	 * Function to save record
	 * @param <Vtiger_Request> $request - values of the record
	 * @return <RecordModel> - record Model of saved record
	 */
	public function saveRecord($request) {
		$recordModel = $this->getRecordModelFromRequest($request);
		if($request->get('imgDeleted')) {
			$imageIds = $request->get('imageid');
			foreach($imageIds as $imageId) {
				$status = $recordModel->deleteImage($imageId);
			}
		}
		$recordModel->save();
		if($request->get('relationOperation')) {
			$parentModuleName = $request->get('sourceModule');
			if(empty($parentModuleName)){
				$parentModuleName = $request->get('returnmodule');
			}
			$parentModuleModel = Vtiger_Module_Model::getInstance($parentModuleName);
			$parentRecordId = $request->get('sourceRecord');
			if(empty($parentRecordId)){
				$parentRecordId = $request->get('returnrecord');				
			}
			$relatedModule = $recordModel->getModule();
			$relatedRecordId = $recordModel->getId();
			if($relatedModule->getName() == 'Events'){
				$relatedModule = Vtiger_Module_Model::getInstance('Calendar');
			}

			$relationModel = Vtiger_Relation_Model::getInstance($parentModuleModel, $relatedModule);
			$relationModel->addRelation($parentRecordId, $relatedRecordId);
		}
		$this->savedRecordId = $recordModel->getId();
		return $recordModel;
	}

	/**
	 * Function to get the record model based on the request parameters
	 * @param Vtiger_Request $request
	 * @return Vtiger_Record_Model or Module specific Record Model instance
	 */
	protected function getRecordModelFromRequest(Vtiger_Request $request) {

		$moduleName = $request->getModule();
		$recordId = $request->get('record');

		$moduleModel = Vtiger_Module_Model::getInstance($moduleName);

		if(!empty($recordId)) {
			$recordModel = Vtiger_Record_Model::getInstanceById($recordId, $moduleName);
			$recordModel->set('id', $recordId);
			$recordModel->set('mode', 'edit');
		} else {
			$recordModel = Vtiger_Record_Model::getCleanInstance($moduleName);
			$recordModel->set('mode', '');
		}

		$fieldModelList = $moduleModel->getFields();
		foreach ($fieldModelList as $fieldName => $fieldModel) {
			$fieldValue = $request->get($fieldName, null);
			$fieldDataType = $fieldModel->getFieldDataType();
			if($fieldDataType == 'time' && $fieldValue !== null){
				$fieldValue = Vtiger_Time_UIType::getTimeValueWithSeconds($fieldValue);
			}
			if($fieldValue !== null) {
				if(!is_array($fieldValue) && $fieldDataType != 'currency') {
					$fieldValue = trim($fieldValue);
				}
				$recordModel->set($fieldName, $fieldValue);
			}
		}
		return $recordModel;
	}
}
